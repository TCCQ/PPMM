Things to do and think about:

what do I need to do to setup the PM for the first time?

we need to be careful, shm does not allow for mapping to a fixed address.

could solve with a PMptr type, is an offset from the base pointer

then have getAddr(PMptr) that returns a void*. so read/writes to the
data use that, and storing the pointer themselves should just store
PMptr type

--------------------------------------------------------------------------
how do unix process restarts work? How should procIDX inheritance work?

-------------------------------------------------------------------------
how do atomics work in memmapped files, and what is the read write timing? can two processes cam b->a and c->a in one spot at the same time. b->a succeeds, c->a fails, and both think they succeeded? should it be b->d, c->e? can I read a location I just cam'd? do I need to flush between? 

------------------------------------------------------------------------
Fix the issue with taken jobs not writing the capsule into the new local job entry

ANSWER I think I fixed this in helpThief? confirm

------------------------------------------------------------------------
do the intial setup, all the PM setup, procIdx mapping and setting all the pointer and whatnot, see top of scheduler.c and bottom of scheduler.h

------------------------------------------------------------------------
how do all these setup things work? should I declare them all extern?

figure out later

------------------------------------------------------------------------
where should forkpath be?

currently it is in the capsule, but that maybe doesn't make sense, as it only changes on interaction with the scheduler, so it could be in the job struct instead, which I think makes more sense abstractly. However if we do that, then we need to make sure that all the local entries are *not* just placeholders for checking the currently installed capsule, but instead have valid data (notably the forkpath). Not sure if that is a quick fix. Also need to decide what the deal is going to be with Joins. That is the other place where forkpath changes, so should it be a capsule handoff like currently, or if it's in job, then a scheduler single Job push (currently we only have pushBottom, which does two). Unclear

------------------------------------------------------------------------
single job scheduler push.

for starting the program and for joins if I go with forkpath in job not in capsule, we need some way to do Job rollover, (end of one job, start of next without pushing garbage). Could maybe just have a inbetween capsule that edits the current job? consider

-----------------------------------------------------------------------
isLive

currently can only hardfault. how do softfaults work? is that not proc death but instead internal to the program? just an interupt handler or something? advise. nothing here seems practical

-----------------------------------------------------------------------
blocking calls

how to safely do any sort of grab, edit, release work? on hardfault, someone else edits and releases, so that's fine, but if all alive procs are blocked waiting for resource, we have deadlock. possible to grab w/ liveCheck? hard to follow who is working at whom's desk. some sort of 'shelf this work and steal' thing for blocking calls? not trivial

----------------------------------------------------------------------
implement single push

just have it be like push bottom, copy current job to second entry, make local (both are valid now), copy toPush into previous (not the new top). then jump to scheduler which will pop top and continue new thread

----------------------------------------------------------------------
kinds of faults

proposed solution:
hard faults are procs dying, and soft faults are triggered / simulated internally with a signal handler. Investigate

----------------------------------------------------------------------
fix cam job and comparejob to be safe

----------------------------------------------------------------------
investigate nested compile time function declaration.

I'd really like to do

pcall(&func, {int a; pPopArg(a), if (a) pret(true); else pret(false);})

but idk if that really works. the block thing would need to be cast to funcPtr_t but it should pass the type check with the macros expanded

----------------------------------------------------------------------

job cams change type, counter, and target (if taken), write a sub struct that is cammable and swap atomically with that. args should not change during cams.

for job continuation, make double sized jobs w/ 1/2 as scratch. write to scratch and then swing which half is in use. 
